version: '3.8'

services:
  #backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: panel-emb-backend
    restart: always
    expose:
      - "3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    env_file:
      - ./backend/.env.production
    networks:
      - panel-emb-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  #frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: final
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
        - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
    container_name: panel-emb-frontend
    restart: always
    expose:
      - "3100"
    ports:
      - "3100:3100"
    environment:
      - NODE_ENV=production
      - PORT=3100
    env_file:
      - ./frontend/.env.production
    networks:
      - panel-emb-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3100"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  #usaremos postgresSql como base de datos principal
  postgres:
    image: postgres:15-alpine
    container_name: panel-emb-postgres
    restart: always
    environment:
      POSTGRES_DB: panel_emb
      POSTGRES_USER: panel_emb_user
      POSTGRES_PASSWORD: b#sHBEj9JrovK_DB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    expose:
      - "5432"
    networks:
      - panel-emb-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U panel_emb_user -d panel_emb"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: panel-emb-redis
    restart: always
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    networks:
      - panel-emb-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3


volumes:
  postgres_data:
  redis_data:
  certbot_etc:
  certbot_var:
    driver: local

networks:
  panel-emb-network:
    external: true
    name: emb-network
    driver: bridge
